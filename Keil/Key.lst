C51 COMPILER V9.01   KEY                                                                   07/22/2018 14:13:38 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Key.obj
COMPILER INVOKED BY: D:\Kell\C51\BIN\C51.EXE ..\Src\Key.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Key.lst) OBJECT(.\Key.obj)

line level    source

   1          #include "RM.h"
   2          #include "Key.h"
   3          #include "Timer.h"
   4          
   5          #define KEY_STATE_UNPRESSED     0x00            //ÊåâÈîÆÁä∂ÊÄÅÔºöÊ≤°ÊúâÊåâ‰∏ã
   6          #define KEY_STATE_DEBOUNCE      0x01            //ÊåâÈîÆÁä∂ÊÄÅÔºöÊåâ‰∏ãÔºå‰ΩÜÊåâ‰∏ãÊó∂Èó¥‰∏çË∂≥ÔºåÂèØËÉΩËøòÂú®È¢§Âä®ÔºåÂõ
             -†Ê≠§Áé∞Âú®Ê¨°Áä∂ÊÄÅÁ≠âÂÄô‰∏ÄÊÆµÊó∂Èó¥
   7          #define KEY_STATE_PRESSED   0x02                //ÊåâÈîÆÁä∂ÊÄÅÔºöÁ°ÆÂÆöÊåâÈîÆÊåâ‰∏ãÂπ∂Á®≥ÂÆöÔºåÂú®Ê≠§Áä∂ÊÄÅ‰∏ãÂå∫ÂàÜÁü≠Ê
             -åâÂíåÈïøÊåâ
   8          #define KEY_STATE_WAITLOOSE 0x03                //ÊåâÈîÆÁä∂ÊÄÅÔºöÁ≠âÂæÖÈïøÊåâÂêéÊùæÂêé‰ºöÂà∞Ê≤°ÊúâÊåâ‰∏ãÁä∂ÊÄÅ
   9          
  10          //////////////////////////////////////////////////////////////////////////////////////////////////
  11          //TODO:Êó∂ÈïøËøòÊúâÂæÖË∞ÉËØïÁ°ÆÂÆöÔºåÂ¶ÇÊûúÊúâÈúÄË¶ÅDEBOUNCE_TIMEÁΩÆ‰∏∫0ÔºåLONG_PRESS_TIMEÁΩÆ‰∏∫Êó†Á©∑ÔºåÂ
             -èñÊ∂àÊ∂àÈ¢§ÂíåÈïøÊåâÂäüËÉΩ //
  12          /////////////////////////////////////////////////////////////////////////////////////////////////
  13          #define DEBOUNCE_TIME_FREQ                      50                              //50Ê¨°KeyScanÂÆåÊàêÊ∂àÈ¢§(Âü∫‰∫éËÆ§‰∏∫‰∏§Ê¨°KeyScanÁõ∏Ë∑ù50‰∏™Êú∫Âô®Â
             -ë®ÊúüÔºåË∞ÉÊï¥ÔºÅ)
  14          #define LONG_PRESS_TIME_FREQ            60000                   //60000Ê¨°KeyScanÂà§ÂÆö‰∏∫ÈïøÊåâ
  15          #define DEBOUNCE_TIME_KEYSCAN           1                               //2msÊ∂àÈ¢§
  16          #define LONG_PRESS_TIME_KEYSCAN         2000                    //2sÂà§ÂÆö‰∏∫ÈïøÊåâ
  17          
  18          
  19          sbit key1=P1^5;                                                                 //Â§ñÈÉ®ÂÖ®Â±ÄÂèòÈáèÔºåËßÅmain.c
  20          sbit key2=P1^4;
  21          sbit key3=P1^3;
  22          
  23          extern uchar timerFun;                                                          //Â§ñÈÉ®ÂÖ®Â±ÄÂèòÈáèÔºåËßÅmain.c
  24          
  25          extern uchar key1Events;                                                        //Â§ñÈÉ®ÂÖ®Â±ÄÂèòÈáèÔºåËßÅmain.c
  26          extern uchar key2Events;
  27          extern uchar key3Events;
  28          
  29          extern bit isKeyEvents;                                                         //Â§ñÈÉ®ÂÖ®Â±ÄÂèòÈáèÔºåËßÅmain.c
  30          
  31          static uchar key1State;                                                         //ËÆ∞ÂΩïÂêÑ‰∏™ÊåâÈîÆÁä∂ÊÄÅ
  32          static uchar key2State;
  33          static uchar key3State;
  34          
  35          static uint key1Timer;                                                          //ÂêÑ‰∏™ÊåâÈîÆÁöÑËÆ°Êó∂Âô®ÔºåÁî®Âú®Ê∂àÈ¢§ÂíåÈïøÊåâÂà§Êñ≠‰∏ä
  36          static uint key2Timer;  
  37          static uint key3Timer;
  38          
  39          static uint debounceTime;
  40          static uint longPressTime;
  41          /**
  42           * ÈÄê‰∏™Êâ´ÊèèÊåâÈîÆÔºåÂπ∂ÊääÊåâÈîÆÊâ´ÊèèÁªìÊûúÔºàÊó†Âä®‰ΩúÔºåÈïøÊåâÔºåÁü≠ÊåâÔºâÊîæÂà∞keyxEventsÂÖ®Â±ÄÂèò
             -Èáè‰∏≠Á≠âÂæÖÂ§ÑÁêÜ
  43           * @Author   Xiaobo     Yang
  44           * @DateTime 2018-07-16
  45           * @Summury
  46           */
  47          void KeyScan(){
  48   1              if(timerFun==TIMERFUN_KEY_SCAN){
  49   2                      debounceTime=DEBOUNCE_TIME_KEYSCAN;
  50   2                      longPressTime=LONG_PRESS_TIME_KEYSCAN;
C51 COMPILER V9.01   KEY                                                                   07/22/2018 14:13:38 PAGE 2   

  51   2              }
  52   1              else{
  53   2                      debounceTime=DEBOUNCE_TIME_FREQ;
  54   2                      longPressTime=LONG_PRESS_TIME_FREQ;
  55   2              }
  56   1              switch(key1State){                                                                              //ÈÄâÊã©Áä∂ÊÄÅ                                  
  57   2                      case KEY_STATE_UNPRESSED:                                                       //Ê≤°ÊúâÊåâ‰∏ãÁä∂ÊÄÅ    
  58   2                              if(!key1) {                                                                             //ÊåâÈîÆÊåâ‰∏ãÔºà‰ΩéÁîµÂπ≥ÔºâÔºåËΩ¨ÁßªÂà∞Ê∂àÈ¢§Áä∂ÊÄÅ
  59   3                                      key1State=KEY_STATE_DEBOUNCE;
  60   3                                      key1Timer=0;                                                            //ÂàùÂßãÂåñËÆ°Êó∂Âô®
  61   3                              }
  62   2                              break;
  63   2                      case KEY_STATE_DEBOUNCE:                                                        //Ê∂àÈ¢§Áä∂ÊÄÅ
  64   2                              if(key1) {                                                                              //ÊåâÈîÆÊùæÂºÄÔºåËØ¥ÊòéËøòÂú®È¢§Âä®ÔºåÂõûÂà∞Ê≤°ÊúâÊåâ‰∏ãÁä∂ÊÄÅ
  65   3                                      key1State=KEY_STATE_UNPRESSED;                                  
  66   3                              }
  67   2                              else if(++key1Timer>debounceTime){                              //ÊåâÈîÆÊåâ‰∏ãÔºåÂ∞±ËÆ°Êï∞ÔºåËã•Êåâ‰∏ãÊó∂ÈïøË∂≥Â§üÔºåËØ¥ÊòéÊåâÈîÆ
             -Á®≥ÂÆöÔºåËΩ¨ÂÖ•Êåâ‰∏ãÁä∂ÊÄÅ
  68   3                                      key1State=KEY_STATE_PRESSED;                            
  69   3                                      key1Timer=0;                                                            //ÈáçËÆæËÆ°Êó∂Âô®
  70   3                              }
  71   2                              break;
  72   2                      case KEY_STATE_PRESSED:
  73   2                              if(key1){                                                                               //Â¶ÇÊûúÊåâÈîÆÊùæÂºÄÔºåÊåâ‰∏ãÊó∂Èó¥Âèà‰∏çÂ§üÔºåÂ∞±ÁªôÂá∫Áü≠Êåâ‰∫ã‰ª∂ÔºåÂπ∂ËΩ¨ÁßªÂà∞Ê
             -ú™Êåâ‰∏ãÁä∂ÊÄÅ
  74   3                                      key1State=KEY_STATE_UNPRESSED;
  75   3                                      key1Events=SHORT_PRESS;
  76   3                                      isKeyEvents=1;                                                          //ÂëäËØâ‰∏ªÁ®ãÂ∫èÊúâÊåâÈîÆ‰∫ã‰ª∂ÂèëÁîü
  77   3                              }
  78   2                              else if(++key1Timer>longPressTime){                             //Â¶ÇÊûúÊåâÈîÆÊ≤°ÊúâÊùæÂºÄÔºåËÆ°Êó∂ÔºåË∂≥Â§üÈïøÂêéÂèëÂá∫ÈïøÊåâ‰∫
             -ã‰ª∂ÔºåËΩ¨ÁßªÂà∞Á≠âÂæÖÊùæÊâãÁä∂ÊÄÅ
  79   3                                      key1Events=LONG_PRESS;
  80   3                                      isKeyEvents=1;                                                          //ÂëäËØâ‰∏ªÁ®ãÂ∫èÊúâÊåâÈîÆ‰∫ã‰ª∂ÂèëÁîü
  81   3                                      key1State=KEY_STATE_WAITLOOSE;
  82   3                              }
  83   2                              break;
  84   2                      case KEY_STATE_WAITLOOSE:
  85   2                              if(key1) key1State=KEY_STATE_UNPRESSED;                 //‰∏ÄÊó¶ÊùæÊâãÔºåÂ∞±‰ºöÂà∞Êú™Êåâ‰∏ãÁä∂ÊÄÅ
  86   2                              break;
  87   2              }
  88   1      
  89   1              switch(key2State){                                                                              //ÂèÇËßÅkey1StateÈÉ®ÂàÜÊ≥®Èáä
  90   2                      case KEY_STATE_UNPRESSED:
  91   2                              if(!key2) {
  92   3                                      key2State=KEY_STATE_DEBOUNCE;
  93   3                                      key2Timer=0;
  94   3                              }
  95   2                              break;
  96   2                      case KEY_STATE_DEBOUNCE:
  97   2                              if(key2) {
  98   3                                      key2State=KEY_STATE_UNPRESSED;
  99   3                              }
 100   2                              else if(++key2Timer>debounceTime){
 101   3                                      key2State=KEY_STATE_PRESSED;
 102   3                                      key2Timer=0;
 103   3                              }
 104   2                              break;
 105   2                      case KEY_STATE_PRESSED:
 106   2                              if(key2){
 107   3                                      key2State=KEY_STATE_UNPRESSED;
 108   3                                      key2Events=SHORT_PRESS;
 109   3                                      isKeyEvents=1;
C51 COMPILER V9.01   KEY                                                                   07/22/2018 14:13:38 PAGE 3   

 110   3                              }
 111   2                              else if(++key2Timer>longPressTime){
 112   3                                      key2Events=LONG_PRESS;
 113   3                                      isKeyEvents=1;
 114   3                                      key2State=KEY_STATE_WAITLOOSE;
 115   3                              }
 116   2                              break;
 117   2                      case KEY_STATE_WAITLOOSE:
 118   2                              if(key2) key2State=KEY_STATE_UNPRESSED;
 119   2                              break;
 120   2              }
 121   1      
 122   1              switch(key3State){                                                                              //ÂèÇËßÅkey1StateÈÉ®ÂàÜÊ≥®Èáä
 123   2                      case KEY_STATE_UNPRESSED:
 124   2                              if(!key3) {
 125   3                                      key3State=KEY_STATE_DEBOUNCE;
 126   3                                      key3Timer=0;
 127   3                              }
 128   2                              break;
 129   2                      case KEY_STATE_DEBOUNCE:
 130   2                              if(key3) {
 131   3                                      key3State=KEY_STATE_UNPRESSED;
 132   3                              }
 133   2                              else if(++key3Timer>debounceTime){
 134   3                                      key3State=KEY_STATE_PRESSED;
 135   3                                      key3Timer=0;
 136   3                              }
 137   2                              break;
 138   2                      case KEY_STATE_PRESSED:
 139   2                              if(key3){
 140   3                                      key3State=KEY_STATE_UNPRESSED;
 141   3                                      key3Events=SHORT_PRESS;
 142   3                                      isKeyEvents=1;
 143   3                              }
 144   2                              else if(++key3Timer>longPressTime){
 145   3                                      key3Events=LONG_PRESS;
 146   3                                      isKeyEvents=1;
 147   3                                      key3State=KEY_STATE_WAITLOOSE;
 148   3                              }
 149   2                              break;
 150   2                      case KEY_STATE_WAITLOOSE:
 151   2                              if(key3) key3State=KEY_STATE_UNPRESSED;
 152   2                              break;
 153   2              }
 154   1      }
 155          /**
 156           * ÂÆåÊàêÊåâÈîÆ‰ø°Âè∑Â§ÑÁêÜÂêéÔºåÂ∫îËØ•Ë∞ÉÁî®ËØ•ÂáΩÊï∞ÂèäÊó∂Ê∏ÖÁêÜÊéâ‰∏ä‰∏ÄÊ¨°ÊåâÈîÆÊâ´ÊèèÂèñÂæóÁöÑ‰∫ã‰ª∂
 157           * @Author   Xiaobo     Yang
 158           * @DateTime 2018-07-18
 159           * @Summury Ê≥®ÊÑèÔºåÂú®Êú¨Á®ãÂ∫è‰∏≠ÔºåÂè™ÊúâÊåâÈîÆ‰ø°Âè∑Ë¢´Â§ÑÁêÜÂêéÔºåÊâç‰ºöËøõË°å‰∏ã‰∏ÄÊ¨°KeyScanÂºïÂÖ•
             -Êñ∞ÁöÑ‰∫ã‰ª∂„ÄÇ
 160           * ËÄåÂ∑≤Â§ÑÁêÜÊåâÈîÆ‰∫ã‰ª∂Ë¶ÅÂèäÊó∂resetÊéâÔºåÊâçËÉΩËÆ©ÊØèÊ¨°KeyScan‰∫í‰∏çÁõ∏Êâ∞„ÄÇ
 161           */
 162          void RstKeyEvents(){
 163   1              key1Events=NONE_PRESS;
 164   1              key2Events=NONE_PRESS;
 165   1              key3Events=NONE_PRESS;
 166   1              isKeyEvents=NONE_PRESS;
 167   1      }
 168          /**
 169           * ÂàùÂßãÂåñÊåâÈîÆÁä∂ÊÄÅÔºåÁî®‰∫éËΩØÈáçÁΩÆ
 170           * @Author   Xiaobo     Yang
C51 COMPILER V9.01   KEY                                                                   07/22/2018 14:13:38 PAGE 4   

 171           * @DateTime 2018-07-18
 172           * @Summury Áî±‰∫éÈáçÁΩÆÊåâÈíÆË¢´Âç†Áî®ÔºåÂõ†Ê≠§ÈááÁî®ËΩØÈáçÁΩÆÂáΩÊï∞ÔºåËΩØÈáçÁΩÆÊó∂Ë¶ÅÈáçËÆæÊâÄÊúâÂíåkeyx
             -ÊúâÂÖ≥ÂèòÈáè
 173           */
 174          void KeyInitial(){
 175   1              key1Events=NONE_PRESS;
 176   1              key2Events=NONE_PRESS;
 177   1              key3Events=NONE_PRESS;
 178   1              isKeyEvents=0;
 179   1              key1State=KEY_STATE_UNPRESSED;
 180   1              key2State=KEY_STATE_UNPRESSED;
 181   1              key3State=KEY_STATE_UNPRESSED;
 182   1              key1Timer=0;
 183   1              key2Timer=0;
 184   1              key3Timer=0;
 185   1      }
 186          /**
 187           * Êàë‰πü‰∏çÁü•ÈÅì‰∏∫‰ªÄ‰πàË¶ÅÂÜôËøô‰∏™ÂáΩÊï∞ÔºåÊÑüËßâÂæàÂ•ΩÁé©ÁöÑÊ†∑Â≠ê
 188           */
 189          void WaitKey(void (*key1Fun) (void),void (*key2Fun) (void),void (*key3Fun) (void)){
 190   1              while(!isKeyEvents) KeyScan();
 191   1              if(key1Events) (*key1Fun) ();
 192   1              if(key2Events) (*key2Fun) ();
 193   1              if(key3Events) (*key3Fun) ();
 194   1              RstKeyEvents();
 195   1      }
 196          /**
 197           * Êåâ‰∏ã‰ªªÊÑèÈîÆÔºåÂê¶ÂàôÈòªÂ°û
 198           * @Author   Xiaobo     Yang
 199           * @DateTime 2018-07-19
 200           * @Summury
 201           */
 202          void PressAnyKey(){
 203   1              while(!isKeyEvents) KeyScan();
 204   1              KeyInitial();
 205   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    421    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
